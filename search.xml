<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>go语言学习第六天</title>
      <link href="/2025/09/08/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%AC%E5%85%AD%E5%A4%A9/"/>
      <url>/2025/09/08/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%AC%E5%85%AD%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="1-递归与迭代的对比总结"><a href="#1-递归与迭代的对比总结" class="headerlink" title="1.递归与迭代的对比总结"></a>1.递归与迭代的对比总结</h2><ul><li><p><strong>递归函数结构</strong><br>包含基准条件（终止递归）和递归条件（函数自身调用，分解问题）。</p></li><li><p><strong>优点</strong>  </p><ul><li>代码简洁，易于理解。</li><li>适合分解为相似子问题的问题，如树遍历、分治算法等。</li></ul></li><li><p><strong>缺点</strong>  </p><ul><li>性能开销较大，递归调用会占用栈空间，递归深度过大可能导致栈溢出。</li><li>调试较困难，递归层次多时不易定位问题。</li></ul></li><li><p><strong>递归与迭代对比</strong></p></li></ul><table><thead><tr><th>特性</th><th>递归</th><th>迭代</th></tr></thead><tbody><tr><td>代码简洁性</td><td>通常更简洁</td><td>可能更冗长</td></tr><tr><td>性能</td><td>可能较慢，占用栈空间</td><td>通常更快，占用较少内存</td></tr><tr><td>适用场景</td><td>适合分解为子问题的问题</td><td>适合线性或简单重复的问题</td></tr></tbody></table><p><strong>总结</strong>：递归适合解决可分解为子问题的复杂场景，代码简洁但有性能和调试上的劣势；迭代适合处理线性、重复性强的问题，性能更优但代码可能冗长。</p><h2 id="2-数值数据类型转换、字符串数据类型转换√"><a href="#2-数值数据类型转换、字符串数据类型转换√" class="headerlink" title="2.数值数据类型转换、字符串数据类型转换√"></a>2.数值数据类型转换、字符串数据类型转换√</h2><h2 id="3-接口类型转换有两种情况：类型断言和类型转换？（方法？）"><a href="#3-接口类型转换有两种情况：类型断言和类型转换？（方法？）" class="headerlink" title="3.接口类型转换有两种情况：类型断言和类型转换？（方法？）"></a>3.接口类型转换有两种情况：类型断言和类型转换？（方法？）</h2><p>1.定义接口、定义结构体；<br>2.结构体实现接口的所有方法；<br>3.结构体赋实例，再赋值给接口变量（数据类型为接口的变量）；<br>4.接口变量直接调用接口方法。</p><p><strong>接口类型变量可以存储任何实现了该接口的类型的值</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.定义接口</span></span><br><span class="line"><span class="keyword">type</span> Shape <span class="keyword">interface</span> &#123;</span><br><span class="line">        Area() <span class="type">float64</span></span><br><span class="line">        Perimeter() <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.定义结构体 Rectangle</span></span><br><span class="line"><span class="keyword">type</span> Rectangle <span class="keyword">struct</span> &#123;</span><br><span class="line">        Long <span class="type">float64</span></span><br><span class="line">Short <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义结构体 Rectangle</span></span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line">        Radius <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.Rectangle 实现 Shape 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Rectangle)</span></span> Area() <span class="type">float64</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c.Long * c.Short</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Rectangle)</span></span> Perimeter() <span class="type">float64</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (c.Long + c.Short)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Circle 实现 Shape 接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span></span> Area() <span class="type">float64</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> math.Pi * c.Radius * c.Radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span></span> Perimeter() <span class="type">float64</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * math.Pi * c.Radius</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s Shape<span class="comment">//接口类型变量可以存储任何实现了该接口的类型的值</span></span><br><span class="line">    <span class="number">4.</span>s= Rectangle&#123;Long: <span class="number">5</span>,Short:<span class="number">3</span>&#125;<span class="comment">//实现了该接口的类型的值</span></span><br><span class="line">fmt.Println(<span class="string">&quot;圆形：&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;面积为：&quot;</span>, s.Area())</span><br><span class="line">    fmt.Println(<span class="string">&quot;周长为：&quot;</span>, s.Perimeter())</span><br><span class="line">s= Circle&#123;Radius: <span class="number">5</span>&#125;<span class="comment">//实现了该接口的类型的值</span></span><br><span class="line">fmt.Println(<span class="string">&quot;矩形：&quot;</span>)</span><br><span class="line">    fmt.Println(<span class="string">&quot;面积为：&quot;</span>, s.Area())</span><br><span class="line">    fmt.Println(<span class="string">&quot;周长为：&quot;</span>, s.Perimeter())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-next-错误处理"><a href="#4-next-错误处理" class="headerlink" title="4.next:错误处理"></a>4.next:错误处理</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Go </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言学习第五天</title>
      <link href="/2025/09/06/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%94%E5%A4%A9/"/>
      <url>/2025/09/06/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%94%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>学了array、slice（其实就是一个容量可变的array）、structure、range遍历各个数组和集合的用法、指针。</p><h1 id="1-Go切片默认容量扩展机制"><a href="#1-Go切片默认容量扩展机制" class="headerlink" title="1.Go切片默认容量扩展机制"></a>1.Go切片默认容量扩展机制</h1><p>在 Go 语言中，切片的容量扩展并不是简单的按需分配，而是结合了<strong>容量翻倍策略</strong>和<strong>内存分配器的大小等级取整</strong>机制。这样设计的目的是提升分配效率、减少内存碎片，并优化整体性能。</p><ul><li>Go 的运行时内存分配器会根据预定义的大小等级分配内存块，而不是每次都精确分配所需字节。</li><li>当切片容量不足时，append 操作会触发扩容，通常采用容量翻倍策略，但最终容量会向上取整到最近的大小等级。</li><li>例如，追加元素后所需容量为 5，但实际分配的容量为 6，因为 6 个 int 能刚好匹配 48 字节的分配等级。</li></ul><h2 id="操作过程举例"><a href="#操作过程举例" class="headerlink" title="操作过程举例"></a>操作过程举例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> numbers []<span class="type">int</span></span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 允许追加空切片 */</span></span><br><span class="line">   numbers = <span class="built_in">append</span>(numbers, <span class="number">0</span>)</span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 向切片添加一个元素 */</span></span><br><span class="line">   numbers = <span class="built_in">append</span>(numbers, <span class="number">1</span>)</span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 同时添加多个元素 */</span></span><br><span class="line">   numbers = <span class="built_in">append</span>(numbers, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="comment">/* 此时的默认扩容到了6而不是5（2+3） ！！！*/</span></span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 创建切片 numbers1 是之前切片的两倍容量*/</span></span><br><span class="line">   numbers1 := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="built_in">len</span>(numbers), (<span class="built_in">cap</span>(numbers))*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 拷贝 numbers 的内容到 numbers1 */</span></span><br><span class="line">   <span class="built_in">copy</span>(numbers1,numbers)</span><br><span class="line">   printSlice(numbers1)   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(x []<span class="type">int</span>)</span></span>&#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>,<span class="built_in">len</span>(x),<span class="built_in">cap</span>(x),x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-Map注意事项"><a href="#2-Map注意事项" class="headerlink" title="2.Map注意事项"></a>2.Map注意事项</h1><p>Map 是引用类型，如果将一个 Map 传递给一个函数或赋值给另一个变量，它们都指向同一个底层数据结构，因此对 Map 的修改会影响到所有引用它的变量。</p><h2 id="指针的易错点"><a href="#指针的易错点" class="headerlink" title="指针的易错点"></a>指针的易错点</h2><p>使用指针所指内容之前，必须先给初始化指针（地址），即有了地址才能找内容，否则为空指针！！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这种机制虽然可能导致单次分配时多分配一些内存，但能显著提升切片 append 操作的平均性能，减少频繁分配带来的性能损耗。<br>当然，容量也可以自定义！！</p><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>channel的定义和用法？</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Go </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言学习第四天</title>
      <link href="/2025/09/05/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
      <url>/2025/09/05/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%AC%E5%9B%9B%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="left">动词</th><th align="left">含义</th><th align="left">示例（整数255）</th><th align="left">示例（浮点数3.14159）</th></tr></thead><tbody><tr><td align="left"><code>%d</code></td><td align="left"><strong>十进制</strong>表示</td><td align="left"><code>255</code></td><td align="left">不适用</td></tr><tr><td align="left"><code>%x</code></td><td align="left"><strong>十六进制</strong>表示，使用<strong>小写</strong>字母 <code>a-f</code></td><td align="left"><code>ff</code></td><td align="left">不适用</td></tr><tr><td align="left"><code>%X</code></td><td align="left"><strong>十六进制</strong>表示，使用<strong>大写</strong>字母 <code>A-F</code></td><td align="left"><code>FF</code></td><td align="left">不适用</td></tr><tr><td align="left"><code>%p</code></td><td align="left"><strong>专用于打印指针（内存地址）</strong>。以十六进制输出，并加上前缀 <code>0x</code>（推荐方式）</td><td align="left"><code>0xff</code></td><td align="left">不适用</td></tr><tr><td align="left"><code>%o</code></td><td align="left"><strong>八进制</strong>表示</td><td align="left"><code>377</code></td><td align="left">不适用</td></tr><tr><td align="left"><code>%f</code></td><td align="left"><strong>浮点数十进制</strong>表示，默认6位小数</td><td align="left">不适用</td><td align="left"><code>3.141593</code></td></tr><tr><td align="left"><code>%g</code></td><td align="left"><strong>自动选择</strong> <code>%e</code> 或 <code>%f</code> 格式，产生更紧凑的输出</td><td align="left">不适用</td><td align="left"><code>3.14159</code></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Go </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言学习第三天</title>
      <link href="/2025/09/04/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
      <url>/2025/09/04/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="Go语言学习笔记"><a href="#Go语言学习笔记" class="headerlink" title="Go语言学习笔记"></a>Go语言学习笔记</h1><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><ul><li><strong>局部变量</strong>：在函数体内声明的变量称为局部变量，其作用域仅限于函数体内部。函数的参数和返回值变量也属于局部变量。</li><li><strong>全局变量</strong>：在函数体外声明的变量称为全局变量，全局变量可以在整个包内，甚至被导出后在外部包中使用。</li><li><strong>使用指针变量与不使用的区别</strong>：指针变量*（地址）的值会跟随变量的变化而变化，对比：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int</span> = <span class="number">4</span></span><br><span class="line">    <span class="keyword">var</span> ptr <span class="type">int</span></span><br><span class="line">    ptr = a </span><br><span class="line">    fmt.Println(ptr)<span class="comment">//4</span></span><br><span class="line">    a = <span class="number">15</span></span><br><span class="line">    fmt.Println(ptr)<span class="comment">//4</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> b <span class="type">int</span> = <span class="number">5</span> </span><br><span class="line">    <span class="keyword">var</span> ptr1 *<span class="type">int</span></span><br><span class="line">    ptr1 = &amp;b </span><br><span class="line">    fmt.Println(*ptr1)<span class="comment">//5</span></span><br><span class="line">    b=<span class="number">15</span> </span><br><span class="line">    fmt.Println(*ptr1)<span class="comment">//15 *ptr1的值跟随b的变化而变化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>备注：</strong></p><ol><li>局部变量的生命周期仅在函数调用期间，函数调用结束后局部变量会被销毁。</li><li>Go 语言中，全局变量与局部变量可以同名，但在函数内部会优先使用局部变量。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Go </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言学习第二天</title>
      <link href="/2025/09/03/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
      <url>/2025/09/03/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="Go语言学习笔记"><a href="#Go语言学习笔记" class="headerlink" title="Go语言学习笔记"></a>Go语言学习笔记</h2><h3 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h3><ul><li>当标识符（包括常量、变量、类型、函数名、结构字段等）以<strong>大写字母</strong>开头时，如 <code>Group1</code>，该标识符可以被外部包的代码访问（需先导入该包），称为“导出”（类似于面向对象语言中的 <code>public</code>）。</li><li>如果标识符以<strong>小写字母</strong>开头，则对包外不可见，但在包内部可见并可用（类似于面向对象语言中的 <code>protected</code>）。</li></ul><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><ul><li>运行 Go 文件：<code>go run hello.go</code></li><li>编译 Go 文件（生成可执行文件）：<code>go build hello.go</code></li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><code>&#123;</code> 不能单独放在一行。</li><li><strong>文件名与包名</strong>没有直接关系，不要求一致。</li><li>同一文件夹下的所有文件<strong>只能有一个包名</strong>。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Go </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言学习第一天</title>
      <link href="/2025/09/02/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
      <url>/2025/09/02/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="先在官网下载配置了go，然后配环境变量"><a href="#先在官网下载配置了go，然后配环境变量" class="headerlink" title="先在官网下载配置了go，然后配环境变量"></a>先在官网下载配置了go，然后配环境变量</h2><h2 id="又顺便熟悉了一下ai编辑器的用法，用go做了一个小游戏"><a href="#又顺便熟悉了一下ai编辑器的用法，用go做了一个小游戏" class="headerlink" title="又顺便熟悉了一下ai编辑器的用法，用go做了一个小游戏"></a>又顺便熟悉了一下ai编辑器的用法，用go做了一个小游戏</h2><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><h2 id="1-package-main只能有一个"><a href="#1-package-main只能有一个" class="headerlink" title="1.package main只能有一个"></a>1.package main只能有一个</h2><h2 id="2-感觉包、库管理很像python，而语法和结构又像C"><a href="#2-感觉包、库管理很像python，而语法和结构又像C" class="headerlink" title="2.感觉包、库管理很像python，而语法和结构又像C"></a>2.感觉包、库管理很像python，而语法和结构又像C</h2><h2 id="3-不说了，五点了刷会视频准备下班吃饭，再买点水果吃"><a href="#3-不说了，五点了刷会视频准备下班吃饭，再买点水果吃" class="headerlink" title="3.不说了，五点了刷会视频准备下班吃饭，再买点水果吃~"></a>3.不说了，五点了刷会视频准备下班吃饭，再买点水果吃~</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Go </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇迹收录馆馆长履历</title>
      <link href="/2025/08/27/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
      <url>/2025/08/27/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="祁飞飞-第一任馆长"><a href="#祁飞飞-第一任馆长" class="headerlink" title="祁飞飞(第一任馆长)"></a>祁飞飞(第一任馆长)</h1><p><strong>出生日期</strong>：2003年1月28日<br><strong>现居地</strong>：湖北省武汉市<br><strong>联系电话</strong>：151-7125-3963<br><strong>电子邮箱</strong>：<a href="mailto:&#113;&#102;&#102;&#x31;&#53;&#49;&#55;&#x31;&#x32;&#x35;&#x33;&#57;&#x36;&#51;&#64;&#x31;&#54;&#51;&#x2e;&#x63;&#111;&#x6d;">qff15171253963@163.com</a>  </p><hr><h2 id="教育背景"><a href="#教育背景" class="headerlink" title="教育背景"></a>教育背景</h2><ul><li><p><strong>武汉科技大学（硕士）</strong><br>2024年9月 – 2027年6月<br>专业方向总排名第四（360分），研究方向为化工智能系统开发。</p></li><li><p><strong>湖北经济学院（本科）</strong><br>2020年9月 – 2024年6月<br>电子信息工程（省级一流专业）。主修课程包括模拟电子技术、数字电子技术、数据分析与智能计算、高级语言程序设计、Matlab数值分析、电路、EDA技术、通信原理、单片机原理与应用、计算机网络与通信、数字信号处理、自动控制原理。</p></li></ul><hr><h2 id="实习经历"><a href="#实习经历" class="headerlink" title="实习经历"></a>实习经历</h2><ul><li><strong>比尔吉（深圳）电子有限公司</strong><br>2024年6月 – 2024年9月<br>嵌入式系统开发实习生。负责调光膜及相关电子产品的嵌入式系统开发与调试，参与软硬件联调，保障系统在不同工作条件下的稳定性与响应速度，完成产品设计至原型验证的全流程。</li></ul><hr><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><ul><li><p><strong>基于空气污染感知的智能温度预测系统（项目负责人）</strong><br>2024年10月 – 2025年5月<br>项目采用PyTorch深度学习框架，融合多源空气污染数据，利用长短期记忆网络（LSTM）进行时间序列建模，实现高精度温度预测。开发了集成模型加载、参数控制与图表展示的桌面可视化系统，系统运行稳定，界面友好，已申请软件著作权。</p></li><li><p><strong>校电子设计协会（会长）</strong><br>2022年9月 – 2023年6月<br>负责协会整体规划与组织管理，统筹科技竞赛、技能培训及创新实践活动。</p></li><li><p><strong>远程医疗健康监控报警系统（项目负责人）</strong><br>2022年5月 – 2023年4月<br>设计并实现基于32单片机的健康监控系统，集成多种传感器并进行本地数据处理与报警。通过WiFi模块联网，采用MQTT协议与服务器交互，实现数据的网页同步显示。项目测温误差≤0.5℃，心率误差≤2%，血氧误差≤1%，获科研基金结项。</p></li></ul><hr><h2 id="荣誉奖励"><a href="#荣誉奖励" class="headerlink" title="荣誉奖励"></a>荣誉奖励</h2><ul><li>五项国家级荣誉证书</li><li>十余项省部级以上荣誉证书</li><li>优秀毕业生</li><li>藏龙学子奖学金</li><li>三好学生</li><li>研究生一等入学奖学金</li></ul><p><strong>技能证书</strong>  </p><ul><li>CET-6，具备良好的英文读写能力  </li><li>计算机三级网络技术证书（优秀）  </li><li>蓝桥杯全国软件和信息技术专业人才大赛国家级二等奖  </li><li>工业互联网嵌入式开发工程师中级</li></ul><p><strong>技术能力</strong>  </p><ul><li>精通Python、C语言，具备嵌入式软件开发与算法实现能力，拥有丰富的代码调试与工程实践经验。</li><li>熟练应用ChatGPT等大语言模型工具，能够结合AI辅助完成程序开发、算法优化与文档撰写，掌握神经网络建模与应用。</li><li>深入理解UART、IIC、SPI等嵌入式通信协议，熟悉TCP、UDP、MQTT等网络通信协议，具备软硬件协同开发与调试经验。</li><li>熟练掌握PyCharm、Matlab、Keil、Quartus、Modelsim等专业软件工具，能够完成算法仿真、硬件设计及系统实现。</li><li>具备FPGA开发与验证经验，能够独立开展硬件电路、Verilog&#x2F;VHDL设计与仿真工作。</li><li>具备化工过程模拟与建模的科研能力，能够将工程计算与数据建模方法应用于生产优化与研究。</li></ul><hr><h2 id="自我评价"><a href="#自我评价" class="headerlink" title="自我评价"></a>自我评价</h2><p>具备较强的自学能力和抗压能力，善于钻研和总结，能够高效完成各类技术研发任务。兴趣广泛，热爱音乐、运动，注重身心健康与全面</p>]]></content>
      
      
      
        <tags>
            
            <tag> 馆长 </tag>
            
            <tag> 简历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注意事项</title>
      <link href="/2025/08/26/%E5%9B%BE%E7%89%87%E9%85%8D%E7%BD%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2025/08/26/%E5%9B%BE%E7%89%87%E9%85%8D%E7%BD%AE%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="图片配置注意事项"><a href="#图片配置注意事项" class="headerlink" title="图片配置注意事项"></a>图片配置注意事项</h1><h2 id="图片配置分为在线图片和本地图片，在线图片可以通过在线链接或者本地图片放到图床中再引用；本地图片放到source文件夹下的img文件夹中引用（要加双引号-！！）"><a href="#图片配置分为在线图片和本地图片，在线图片可以通过在线链接或者本地图片放到图床中再引用；本地图片放到source文件夹下的img文件夹中引用（要加双引号-！！）" class="headerlink" title="图片配置分为在线图片和本地图片，在线图片可以通过在线链接或者本地图片放到图床中再引用；本地图片放到source文件夹下的img文件夹中引用（要加双引号~！！）"></a>图片配置分为在线图片和本地图片，在线图片可以通过在线链接或者本地图片放到图床中再引用；本地图片放到source文件夹下的img文件夹中引用（要加双引号~！！）</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly的安装和配置</title>
      <link href="/2025/08/25/butterfly%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2025/08/25/butterfly%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><h3 id="在你的-Hexo-根目录"><a href="#在你的-Hexo-根目录" class="headerlink" title="在你的 Hexo 根目录"></a>在你的 Hexo 根目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-theme-butterfly</span><br></pre></td></tr></table></figure><h3 id="升級方法：在-Hexo-根目录下，运行"><a href="#升級方法：在-Hexo-根目录下，运行" class="headerlink" title="升級方法：在 Hexo 根目录下，运行"></a>升級方法：在 Hexo 根目录下，运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update hexo-theme-butterfly</span><br></pre></td></tr></table></figure><h2 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h2><h3 id="修改-Hexo-根目錄下的-config-yml，把主題改為-butterfly"><a href="#修改-Hexo-根目錄下的-config-yml，把主題改為-butterfly" class="headerlink" title="修改 Hexo 根目錄下的 _config.yml，把主題改為 butterfly"></a>修改 Hexo 根目錄下的 _config.yml，把主題改為 butterfly</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><h3 id="如果你沒有-pug-以及-stylus-的渲染器，請下載安裝："><a href="#如果你沒有-pug-以及-stylus-的渲染器，請下載安裝：" class="headerlink" title="如果你沒有 pug 以及 stylus 的渲染器，請下載安裝："></a>如果你沒有 pug 以及 stylus 的渲染器，請下載安裝：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo的配置和初始化</title>
      <link href="/2025/08/25/hexo%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2025/08/25/hexo%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="0-首先安装好node-js和git（安装基础环境）"><a href="#0-首先安装好node-js和git（安装基础环境）" class="headerlink" title="0.首先安装好node.js和git（安装基础环境）"></a>0.首先安装好node.js和git（安装基础环境）</h2><h2 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1.安装hexo"></a>1.安装hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><h3 id="安装hexo依赖"><a href="#安装hexo依赖" class="headerlink" title="安装hexo依赖"></a>安装hexo依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h2 id="2-现在就可以通过hexo命令预览初创hexo网站了！"><a href="#2-现在就可以通过hexo命令预览初创hexo网站了！" class="headerlink" title="2.现在就可以通过hexo命令预览初创hexo网站了！"></a>2.现在就可以通过hexo命令预览初创hexo网站了！</h2><h3 id="清除hexo缓存"><a href="#清除hexo缓存" class="headerlink" title="清除hexo缓存"></a>清除hexo缓存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo cl</span><br></pre></td></tr></table></figure><h3 id="构建hexo"><a href="#构建hexo" class="headerlink" title="构建hexo"></a>构建hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h3 id="本地预览hexo"><a href="#本地预览hexo" class="headerlink" title="本地预览hexo"></a>本地预览hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><h3 id="上传hexo"><a href="#上传hexo" class="headerlink" title="上传hexo"></a>上传hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/08/25/hello-world/"/>
      <url>/2025/08/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 梦开始的地方 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
